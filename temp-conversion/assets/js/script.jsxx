// Simplify The Code To Get The Document Targeting From ID, by Default, Else By Class
function getElm(node, targetID = true) {
	// Return If targetID set with false
	if (!targetID) return document.getElementsByClassName(node);

	// Default Return
	return document.getElementById(node);
}

// Check If Empty Value
function isEmpty(str) {
	return !str.trim().length;
}

// Set Disabled Element
function disabElm(elm) {
	return elm.setAttribute('disabled', '');
}

// Reseting Element Value
function resetValue(elm) {
	return elm.value = '';
}

// Iteration Elements
function elmIterates(elements, actionFunc) {
	elements.forEach((e) => {
		actionFunc(e);
    });
}

// Disable Multiple Elements
function disableElements(elements) {
	elmIterates(elements, disabElm);
}

// Reset Multiple Elements
function resetElements(elements) {
	elmIterates(elements, resetValue);
}

// Calculation By Method
function calculation(method, input) {
	var resultData;
	switch(method) {
		case 'celcius': /*(inputValue °C × 9/5) + 32 = Result °F*/
			resultData = Math.floor((parseFloat(input) * 9/5) + 32);
		break;
		case 'fahrenheit': /*(inputValue °F − 32) × 5/9 = Result °C*/
			resultData = Math.ceil((parseFloat(input) - 32) * 5/9);
	}
	
	return resultData;
}

// Create New Elements
function createNewElement(tag, attributes = {}, text = '') {
	// Create New Tag Element
	const element = document.createElement(tag);

	// Draw Some Attributes For That Element Created
	for (const [key, value] of Object.entries(attributes)) element.setAttribute(key, value);

	// If any text found, then create text.
	// But check and parsing that text into HTML, if contain any HTML character
	if (text) {
		const parser		= new DOMParser();
		const doc			= parser.parseFromString(text, 'text/html');
		element.innerHTML	= doc.body.innerHTML;
	}

	// Draw New HTML Element
	return element;
}

// Create Multiple Elements Based On createNewElement() Function Above 
function createMultipleElements(elements) {
	return elements.map(({ tag, attributes, text }) => createNewElement(tag, attributes, text));
}

// Create Const Variable From Document
const calcBox		= getElm('calc-box');
const convertionBox	= getElm('conv-box');
const buttonsBox	= getElm('button-box');
const infoBox		= getElm('info-box');

// Create Input Elements (Left Box)
const inputCalc = createMultipleElements([
	{
		// Create Select Box Calculation Method
		tag: 'select',
		attributes: {
			'id'	: 'calcMethod',
			'class'	: 'calc-method'
		},
		text:
			'<option value="">Pilih Konversi</option>' +
			'<option value="celcius">(&deg; C) Celcius</option>' +
			'<option value="fahrenheit">(&deg; F) Fahrenheit</option>'
	}, {
		// Create Calculation Input Box
		tag: 'input',
		attributes: {
			'name'	: 'inputCalc',
			'id'	: 'inputCalcID',
			'class'	: 'input'
		}
	}
]);
// Draw Calculation Box
inputCalc.forEach(inputCalc => calcBox.appendChild(inputCalc));

// Create Input Elements (Right Box)
const inputConvertion = createMultipleElements([
	{
		// Create Label [ Fahrenheit ]
		tag: 'label',
		attributes: {
			'for'	: 'inputConvertionID',
			'id'	: 'inputConvertionlabel',
			'class'	: 'label input-label'
		},
		text: 'Hasil Konversi'
	}, {
		// Create Input [ Fahrenheit ]
		tag: 'input',
		attributes: {
			'name'	: 'inputConvertion',
			'id'	: 'inputConvertionID',
			'class'	: 'input'
		}
	}
]);
// Draw Label & InputBox [ Fahrenheit ]
inputConvertion.forEach(inputConvertion => convertionBox.appendChild(inputConvertion));

// Create Button Elements
const buttonsElm = createMultipleElements([
	{
		// Create Reset Button
		tag: 'button',
		attributes: {
			'name'	: 'reset',
			'id'	: 'buttonReset',
			'class'	: 'button'
		},
		text: 'Reset'
	}, {
		// Create Reverse Button
		tag: 'button',
		attributes: {
			'name'	: 'reverse',
			'id'	: 'buttonReverse',
			'class'	: 'button'
		},
		text: 'Reverse'
	}
]);
// Draw Buttons
buttonsElm.forEach(buttonsElm => buttonsBox.appendChild(buttonsElm));

// Identifiers Variable
let calcInput		= getElm('inputCalcID');
let convInput		= getElm('inputConvertionID');
let notification	= getElm('notification');

// Initialize Buttons
const buttonReset	= getElm('buttonReset');
const buttonReverse = getElm('buttonReverse');

// Event Listener For Reset Button
buttonReset.addEventListener('click', () => {
	resetElements([getElm('calcMethod'), calcInput, convInput]);
	disableElements([calcInput, convInput, buttonReset, buttonReverse]);
});

// Set Action Buttons When On-Load Windows
window.onload = () => {
	disableElements([calcInput, convInput, buttonReset, buttonReverse]);
}

function notif(alert = '') {
	return notification.innerHTML = alert;
}

// Event Listener For Input Calulation
function conversionMethod(method, inputValue = 0) {
	if (!isEmpty(inputValue)) {
		// Check If Selection Method Change With Input Value Not Empty[0]
		return convInput.value = calculation(method, inputValue);
		
	} else {
		// Check If Method Selected
		return calcInput.addEventListener('input', () => {
			
			// Check Input Data Type
			if (isNaN(calcInput.value) || isEmpty(calcInput.value)) {
				// When Input Value Is Not Number/Float And/Or It Was Empty
				notif('Ups, Data Harus Diisi Dan Wajib Berupa Angka Atau Desimal!');
				resetElements([calcInput, convInput]);
				disableElements([buttonReset, buttonReverse]);

			} else {
				// When Input Value Is Number/Float And/Or It Was Not Empty
				notif();
				buttonReset.removeAttribute('disabled');
				buttonReverse.removeAttribute('disabled');
				
				convInput.value = calculation(method, calcInput.value);
			}
		});
	}
}

// Calculation Method For Event Method Listener
function readEventMethodListener(value) {		
	calcInput.removeAttribute('disabled');
	
	if(isEmpty(value)) {
		resetElements([calcInput, convInput]);
		disableElements([calcInput, convInput, buttonReset, buttonReverse]);
	} else {
		return conversionMethod(value, calcInput.value);
	}
}

// Event Listener For Selection Method
getElm('calcMethod').addEventListener('change', () => {
	readEventMethodListener(getElm('calcMethod').value);
});

// Event Listener For Reverse Button
buttonReverse.addEventListener('click', () => {
	let methodName	= getElm('calcMethod');
	let nodeValue	= convInput.value;
	
	var setMethod;
	if ('celcius' === methodName.value) {
		setMethod = 'fahrenheit';
	} else {
		setMethod = 'celcius';
	}
	
	methodName.value	= setMethod;
	calcInput.value		= nodeValue;
	
	readEventMethodListener(setMethod);
});

// Create Informations Box
const infoElm = createMultipleElements([
	{
		// Create Reset info
		tag: 'h3',
		attributes: {
			'id': 'info',
			'class': 'info'
		},
		text: 'Info Kalkulasi'
	}
]);
// Draw Info Box
infoElm.forEach(infoElm => infoBox.appendChild(infoElm));